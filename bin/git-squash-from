#!/bin/bash
# git-squash-from
# A CLI tool to squash Git commits interactively based on user input

set -e

count=$1

if [ -z "$count" ] || ! echo "$count" | grep -Eq '^[0-9]+$'; then
  echo "‚ùå Please provide a valid numeric count."
  exit 1
fi

i=0
while IFS= read -r line && [ "$i" -lt "$count" ]; do
  i=$((i + 1))
  commits[i]="$line"
done <<EOF
$(git log --oneline --decorate -n "$count")
EOF

if [ "$i" -eq 0 ]; then
  echo "‚ùå No commits found."
  exit 1
fi

echo "üìú Select a commit to squash everything into:"
for j in $(seq 1 $i); do
  echo "$j) ${commits[j]}"
done

while true; do
  printf "Enter number [1-$i]: "
  read choice
  if echo "$choice" | grep -Eq "^[0-9]+$" && [ "$choice" -ge 1 ] && [ "$choice" -le "$i" ]; then
    base_hash=$(echo "${commits[choice]}" | awk '{print substr($1, 1, 7)}')
    commit_message=$(git log --oneline --reverse "$base_hash^..HEAD" | sed '1s/^[^ ]* //; 2,$s/^/* /')

    echo "üîß Squashing commits from ${base_hash}^ to HEAD..."

    # Create temp script for GIT_SEQUENCE_EDITOR to squash all except the first
    seq_script=$(mktemp)
    cat > "$seq_script" <<'EOSCRIPT'
#!/bin/bash
sed -i '' '2,$s/^pick /squash /' "$1"
EOSCRIPT
    chmod +x "$seq_script"

    # Check if the user wants to squash all commits from the root
    if [ "$choice" -eq "$i" ]; then
      echo "üîß Squashing all commits from the root..."
      rebase_cmd="git rebase -i --root"
    else
      echo "üîß Squashing commits from ${base_hash}^ to HEAD..."
      rebase_cmd="git rebase -i ${base_hash}^"
    fi

    # Start rebase with interactive squashing
    GIT_SEQUENCE_EDITOR="$seq_script" $rebase_cmd

    rm -f "$seq_script"

    # Check for paused rebase and inject commit message
    if [ $? -eq 0 ]; then
      editor_script=$(mktemp)
      cat > "$editor_script" <<EOF
#!/bin/bash
cat <<MSG > "\$1"
$commit_message
MSG
EOF
      chmod +x "$editor_script"

      GIT_EDITOR=true git commit --amend -m "$commit_message" >/dev/null 2>&1
      rm -f "$editor_script"

      if [ -d ".git/rebase-merge" ] || [ -d ".git/rebase-apply" ]; then
        git rebase --continue >/dev/null 2>&1
      fi

      echo "‚úÖ Squash complete!"
    fi

    break
  else
    echo "‚ö†Ô∏è  Invalid selection. Try again."
  fi
done
